unit PcCam;

{$IFDEF FPC}
{$MODE Delphi}
{$ENDIF}

interface

uses
{$IFNDEF FPC}
  jpeg,Windows,
{$ELSE}
  LCLIntf, LCLType, LMessages,
{$ENDIF}
  Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, MRVCamera, StdCtrls, MRVCamView, ExtCtrls, MRVType, MRVImg, ComCtrls;

type
  TfrmPcCam = class(TForm)
    RVCamView1: TRVCamView;
    RVCamera1: TRVCamera;
    pbSnapShot: TPaintBox;
    GroupBox1: TGroupBox;
    btnOn: TButton;
    btnOff: TButton;
    btnSnapShot: TButton;
    cmbVideoResolution: TComboBox;
    Label1: TLabel;
    Label2: TLabel;
    cmbCamera: TComboBox;
    Splitter1: TSplitter;
    StatusBar1: TStatusBar;
    procedure btnOnClick(Sender: TObject);
    procedure btnOffClick(Sender: TObject);
    procedure btnSnapShotClick(Sender: TObject);
    procedure cmbVideoResolutionChange(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure cmbCameraChange(Sender: TObject);
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmPcCam: TfrmPcCam;

implementation

{$R *.dfm}

procedure TfrmPcCam.FormCreate(Sender: TObject);
begin
  // Adding names of available webcams to cmbCamera
  RVCamera1.FillVideoDeviceList(cmbCamera.Items);
  if cmbCamera.Items.Count = 0 then
  begin
    // no webcam found
    StatusBar1.SimpleText := 'No webcam detected';
    btnOn.Enabled := False;
    btnOff.Enabled := False;
    btnSnapShot.Enabled := False;
    cmbVideoResolution.Enabled := False;
    cmbCamera.Enabled := False;
    exit;
  end
  else
  begin
    // selecting the active webcam
    cmbCamera.ItemIndex := RVCamera1.VideoDeviceIndex;
    StatusBar1.SimpleText := 'Camera: ' + cmbCamera.Text;

  end;

end;

procedure TfrmPcCam.FormShow(Sender: TObject);
begin
  if (cmbCamera.Items.Count > -1) then
  begin
    // choice the camera
    cmbCamera.ItemIndex := 0;
    cmbCameraChange(nil);

    // Choice the resolution
    // cmbVideoResolution.ItemIndex := 0;
    //
    //
    // RVCamera1.SetCamVideoMode(cmbVideoResolution.ItemIndex);
    // cmbVideoResolution.ItemIndex := RVCamera1.GetCamVideoModeIndex;
    // cmbVideoResolution.ItemIndex := 0;
  end;

end;

// Starting playing video from the selected webcam
procedure TfrmPcCam.btnOnClick(Sender: TObject);
begin
  RVCamera1.PlayVideoStream;
end;

// Stopping video from the selected webcam
procedure TfrmPcCam.btnOffClick(Sender: TObject);
begin
  RVCamera1.Abort;
end;

// Changing webcam
procedure TfrmPcCam.cmbCameraChange(Sender: TObject);
var
  i: Integer;
  CamVideoMode: TRVCamVideoMode;
begin
  RVCamera1.VideoDeviceIndex := cmbCamera.ItemIndex;
  StatusBar1.SimpleText := 'Camera: ' + cmbCamera.Text;
  // adding available webcam modes in cmbVideoResolution
  for i := 0 to RVCamera1.GetCamVideoModeCount - 1 do
  begin
    RVCamera1.GetCamVideoMode(i, CamVideoMode);
    cmbVideoResolution.Items.Append(IntToStr(CamVideoMode.Width) + 'x' + IntToStr(CamVideoMode.Height) + ' ' + IntToStr(CamVideoMode.ColorDepth) + 'bits');
  end;
  // Selecting the current mode
  cmbVideoResolution.ItemIndex := RVCamera1.GetCamVideoModeIndex;
end;

// Changing video mode for the current webcam
procedure TfrmPcCam.cmbVideoResolutionChange(Sender: TObject);
begin
  RVCamera1.SetCamVideoMode(cmbVideoResolution.ItemIndex);
  cmbVideoResolution.ItemIndex := RVCamera1.GetCamVideoModeIndex;
end;

// Drawing a snapshot in pbSnapShot

procedure PaintToCanvas(Canvas: TCanvas);
begin
  with Canvas do
  begin
    MoveTo(0, 0);
    LineTo(42, 666);
    // and so on.
  end;
end;

procedure PaintToFile(APaintBox: TPaintBox; const FileName: string);
var
  Bitmap: TBitmap;
begin
  Bitmap := TBitmap.Create;
  try
    Bitmap.SetSize(APaintBox.Width, APaintBox.Height);
    // PaintToCanvas(Bitmap.Canvas);
    Bitmap.SaveToFile(FileName);
  finally
    Bitmap.Free;
  end;
end;

procedure TfrmPcCam.btnSnapShotClick(Sender: TObject);
const
  FolderPic = 'Profile';
var
  Img: TRVImageWrapper;
  pathPic: string;
  Bitmap: TBitmap;
  r: TRect;
begin
  pathPic := ExtractFilePath(Application.ExeName) + FolderPic + PathDelim;
  if not directoryexists(pathPic) then
    ForceDirectories(pathPic);
  Bitmap := TBitmap.Create;
  Img := RVCamera1.GetSnapShot;
  try

    pbSnapShot.Canvas.Draw(0, 0, Img.Bitmap.GetBitmap);
    Bitmap.Width := pbSnapShot.Width;
    Bitmap.Height := pbSnapShot.Height;
     r := rect(0, 0, Bitmap.Width, Bitmap.Height);
    Bitmap.Canvas.CopyRect(r, pbSnapShot.Canvas, r);

    if (MessageDlg('Do you wanna save the picture ?', mtWarning, mbYesNo, 0) = mrYes) then
      Bitmap.SaveToFile(pathPic + 'PicProfile.jpg');
  finally
    Img.Free;
    Bitmap.Free;

  end;
end;

end.
