unit MainModule;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.ExprFuncs, FireDAC.Phys.SQLiteDef, FireDAC.UI.Intf, FireDAC.FMXUI.Wait, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.Phys.Intf,
  FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, Data.DB, FireDAC.Comp.Client, FireDAC.Comp.UI, FireDAC.Phys.SQLite,ubaby;

type
  TDMMainModule = class(TDataModule)
    FDPhysSQLiteDriverLink1: TFDPhysSQLiteDriverLink;
    FDGUIxWaitCursor1: TFDGUIxWaitCursor;
    ConnectionMain: TFDConnection;
    procedure DataModuleCreate(Sender: TObject);
  private
    { Private declarations }
    function  SqlitConnection(): TFDConnection;
  public
    { Public declarations }
    function   GetUserList(): TList<TUser>;
    procedure  DeleteUser(userId:Integer);
    procedure  AddBaby(Baby:TBaby);
  end;

var
  DMMainModule: TDMMainModule;

implementation


{%CLASSGROUP 'FMX.Controls.TControl'}

{$R *.dfm}



procedure TDMMainModule.AddBaby(Baby:TBaby);
var
 FDQuery1 : TFDQuery;
begin
TRY
    FDQuery1 := TFDQuery.Create(Self);
    FDQuery1.Connection:= SqlitConnection();
    FDQuery1.SQL.Text:='INSERT INTO Baby (FirstName, LastName,Present,ProfileImage) VALUES (:FirstName,:LastName,:Present,:ProfileImage)';

    FDQuery1.ParamByName('FirstName').AsString:=baby.FirstName;
    FDQuery1.ParamByName('LastName').AsString :=baby.LastName;
    FDQuery1.ParamByName('Present').AsBoolean:=baby.;
    FDQuery1.ParamByName('LastName').AsBlob :=baby.LastName;
    FDQuery1.ExecSQL;
FINALLY
     FDQuery1.Connection.Close;
     FDQuery1.Connection.Free;
     FDQuery1.Close;
     FDQuery1.Free;
END;
end;

procedure  TDMMainModule.DeleteUser(userId:Integer);
var
 FDQuery1 : TFDQuery;
begin
TRY
    FDQuery1 := TFDQuery.Create(Self);
    FDQuery1.Connection:= SqlitConnection();
    FDQuery1.SQL.Text:=Format('DELETE FROM USER WHERE Id=%d',[userId]);
    FDQuery1.ExecSQL;
FINALLY
     FDQuery1.Connection.Close;
     FDQuery1.Connection.Free;
     FDQuery1.Close;
     FDQuery1.Free;
END;
end;

function TDMMainModule.SqlitConnection(): TFDConnection;
var
  dbPath:string;
const
  DBFILE = 'DBBabys.db';
begin
    {$IFDEF MSWINDOWS}
        dbPath := TPath.Combine(ExpandFileName(GetCurrentDir), DBFILE);
    {$ELSE}
        dbPath := TPath.GetDocumentsPath + PathDelim + DBFILE;
    {$ENDIF}
    Result := TFDConnection.Create(self);
    Result.Params.Add('Database='+  dbPath);
    Result.DriverName:='SQLite';
    Result.LoginPrompt := False;
    Result.Open();
end;

function TDMMainModule.GetUserList(): TList<TUser>;
var
  mUser : TUser;
  FDQuery1 : TFDQuery;
begin

TRY
    Result:= TList<TUser>.Create();

    FDQuery1 := TFDQuery.Create(Self);
    FDQuery1.Connection:= SqlitConnection();
    FDQuery1.SQL.Text:='SELECT * FROM Babys';
    FDQuery1.Open;

     while not FDQuery1.EOF do
      begin
          Result.Add(
          TUser.Create(
                FDQuery1.FieldByName('Id').AsInteger,
                FDQuery1.FieldByName('FirstName').AsString,
                FDQuery1.FieldByName('LastName').AsString
                )
          );
          FDQuery1.Next;
      end;

FINALLY
     FDQuery1.Connection.Close;
     FDQuery1.Connection.Free;
     FDQuery1.Close;
     FDQuery1.Free;
END;

end;

end.
